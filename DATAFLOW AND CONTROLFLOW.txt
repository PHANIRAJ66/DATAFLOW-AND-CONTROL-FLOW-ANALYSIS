#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
#include&lt;ctype.h&gt;
void input();
void output();
void change(int p,int q,char *res);
void constant();
void expression();
struct expr
{
char op[2],op1[5],op2[5],res[5];
int flag;
}arr[10];
int n;
int main()
{
int ch=0;
input();
constant();
expression();
output();

}
void input()
{
int i;
printf(&quot;\n\nEnter the maximum number of expressions:&quot;);
scanf(&quot;%d&quot;,&amp;n);
printf(&quot;\nEnter the input : \n&quot;);
for(i=0;i&lt;n;i++)
{
scanf(&quot;%s&quot;,arr[i].op);
scanf(&quot;%s&quot;,arr[i].op1);
scanf(&quot;%s&quot;,arr[i].op2);
scanf(&quot;%s&quot;,arr[i].res);
arr[i].flag=0;
}
}
void constant()
{
int i;
int op1,op2,res;
char op,res1[5];
for(i=0;i&lt;n;i++)
{
if(isdigit(arr[i].op1[0]) &amp;&amp; isdigit(arr[i].op2[0]))
{
op1=atoi(arr[i].op1);
op2=atoi(arr[i].op2);
op=arr[i].op[0];
switch(op)
{
case &#39;+&#39;:

res=op1+op2;
break;
case &#39;-&#39;:
res=op1-op2;
break;
case &#39;*&#39;:
res=op1*op2;
break;
case &#39;/&#39;:
res=op1/op2;
break;
}
sprintf(res1,&quot;%d&quot;,res);
arr[i].flag=1;
change(i,i,res1);
}
}
}
void expression()
{
int i,j;
for(i=0;i&lt;n;i++)
{
for(j=i+1;j&lt;n;j++)
{
if(strcmp(arr[i].op,arr[j].op)==0)
{
if(strcmp(arr[i].op,&quot;+&quot;)==0||strcmp(arr[i].op,&quot;*&quot;)==0)
{
if(strcmp(arr[i].op1,arr[j].op1)==0&amp;&amp;strcmp(arr[i].op2,arr[j].op2)==0 ||
strcmp(arr[i].op1,arr[j].op2)==0&amp;&amp;strcmp(arr[i].op2,arr[j].op1)==0)

{
arr[j].flag=1;
change(i,j,NULL);
}
}
else
{
if(strcmp(arr[i].op1,arr[j].op1)==0&amp;&amp;strcmp(arr[i].op2,arr[j].op2)==0)
{
arr[j].flag=1;
change(i,j,NULL);
} }
} }
} }
void output()
{
int i=0;
printf(&quot;\nOptimized code is : &quot;);
for(i=0;i&lt;n;i++)
{
if(!arr[i].flag)
{
printf(&quot;\n%s %s %s %s\n&quot;,arr[i].op,arr[i].op1,arr[i].op2,arr[i].res);
}
}
}
void change(int p,int q,char *res)
{
int i;
for(i=q+1;i&lt;n;i++)
{

if(strcmp(arr[q].res,arr[i].op1)==0)
if(res == NULL)
strcpy(arr[i].op1,arr[p].res);
else
strcpy(arr[i].op1,res);
else if(strcmp(arr[q].res,arr[i].op2)==0)
if(res == NULL)
strcpy(arr[i].op2,arr[p].res);
else
strcpy(arr[i].op2,res);
}
}